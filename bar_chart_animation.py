import bar_chart_race as bcr
import pandas as pd  # Make sure to import pandas
import inspect
import subprocess
def create_animation_from_csv(csv_file, output_filename):
    function_text = get_function_text()
    filepath = create_animation(csv_file, output_filename)
    add_metadata_to_video(filepath, function_text)

def get_function_text():
    lines = inspect.getsourcelines(create_animation)
    return "".join(lines[0])



def add_metadata_to_video(video_path, metadata_comment):
    print('metadata_comment', metadata_comment)
    # Prepare the ffmpeg command to add metadata
    cmd = [
        'ffmpeg',
        '-i', video_path,  # Input file
        '-metadata', f'comment={metadata_comment}',  # Add metadata comment
        #'-metadata', f'comment=my comment',  # Add metadata comment
        '-codec', 'copy',  # Use the same codecs for audio/video (no re-encoding)
        video_path.replace('.mp4', '_with_metadata.mp4')  # Output file
    ]
    
    # Execute the command
    subprocess.run(cmd, check=True)



# # # Function comment as a string (simplified example)
# function_comment = "Function create_animation_from_csv generates a bar chart race animation from a CSV file."

# # # Assuming your video is already generated by the function
# video_path = '/home/twain/Projects/py_habits_widget/habits4.mp4'
# add_metadata_to_video(video_path, function_comment)


def create_animation(csv_file, output_filename):
    df_from_csv = pd.read_csv(csv_file, index_col=0)
    df_from_csv = df_from_csv.round(2)
    filepath = f"/home/twain/Projects/py_habits_widget/{output_filename}.mp4"
    bcr.bar_chart_race(
            df=df_from_csv, 
            filename=filepath, 
            orientation='h', 
            sort='desc', 
            #figsize=(12, 10), 
            #bar_label_size=4,
            fixed_order=False, 
            fixed_max=True, 
            steps_per_period=10, 
            period_length=300, 
            #end_period_pause=0,
            interpolate_period=False, 
            period_label={'x': .98, 'y': .3, 'ha': 'right', 'va': 'center', 'size': 18}, 
            #period_template='%B %d, %Y', 
            period_summary_func=lambda v, r: {'x': .98, 'y': .2, 's': f'Average daily points: {v.sum():,.0f}', 'ha': 'right', 'size': 18}, 
            perpendicular_bar_func='median', 
            colors=['#cbd325', '#646f64', '#5e755e', '#455ceb', '#5c70ed', '#7384f0', '#8a98f2', '#d4dc35', '#d9e04b', '#000000', '#32fe96', '#cd23cb', '#dc99ac', '#5e3ceb', '#25d4ec', '#7153ee', '#7500fa', '#d1d91f', '#e2acbc', '#32feeb', '#e9bfcb', '#4cfeed', '#000000', '#4cfea3', '#65fef0', '#efd2da', '#f6e5ea', '#df95ab', '#df95ab', '#b8eb2a', '#000000', '#d1d91f', '#65feb0', '#32ff96', '#32ff96', '#846af0', '#4058f0', '#9882f2', '#5b37f1', '#5b37f1', '#d1d91f', '#c0ed41', '#d1d91f', '#d1d91f', '#8215ff', '#df95ab', '#000000', '#7500fa', '#c8ef58', '#df95ab', '#000000', '#bbf024'], 
            title='Habit done', 
            bar_size=.65, 
            #bar_textposition='inside',
            bar_texttemplate='{x:,.4f}', 
            #bar_label_font=7, 
            #tick_label_font=7, 
            tick_template='{x:,.2f}', #this is how many decimal points are shown
            #bar_label_fmt='{x:,.3f}',
            shared_fontdict=None, 
            scale='linear', 
            fig=None, 
            writer=None, 
            bar_kwargs={'alpha': .7},
            fig_kwargs={'figsize': (12, 10), 'facecolor': 'white'},
            #fig_kwargs={'figsize': (6, 3.5), 'dpi': 144},
            filter_column_colors=True) 
    
    return filepath

import inspect

#FOR WEEKLY VIDEO I NEED TO
#it is commented out in habit_streak_finder now
#show decimal points maybe out 2 or 3 places
#maybe monthly will be easier to follow
#fix the widget ones


#create_animation_from_csv('covid19_tutorial.csv')
create_animation_from_csv('habits_count_smoothed_monthly.csv', "monthly4") #it would be cool to get number of dreams worked into the
#create_animation_from_csv('stats_anim_short2.csv', "test")

#WHEN I MAKE THESE I SHOULD SOMEHOW ATTACH ALL THE CODE THAT IT TOOK TO MAKE IT. I REMEMBER THERE IS A WAY TO DO THIS


#INSTRUCTIONS

#STICK THIS CODE INTO habitdb_streak_finder.py and adjust it to work with whatever data you want. After you have done that once, then you can use the .csv file to make the animation. It may be best to just take the animation stuff out of this code all together and just do the animations separately.
    # smoothed_activity_points_weekly_full = []
    # for i, act in enumerate(activity_daily_count):
    #     habit_name = activities[i]
    #     print('habit_name', habit_name)
    #     if "widget" in habit_name.lower():
    #         print('habit_name2              widget', habit_name)
    #         #run every number in the list through the habit_helper.get_widget_count function
    #         act = [habit_helper.adjust_habit_count(x, habit_name) for x in act]
        
    #     activity_daily_series = pd.Series(act)
    #     smoothed_activity_points_weekly = activity_daily_series.rolling(window=30).mean().tolist()
    #     smoothed_activity_points_weekly_full.append(smoothed_activity_points_weekly)
    # #---WOULD BE COOL TO GET NUMBER OF DREAMS IN WITH THIS
    # #THIS CODE CREATES AN ANIMATION FROM THE CSV FILE
    # # Transpose the structure: Create a dictionary with activities as keys and lists of points as values
    # activity_data = {activity: points for activity, points in zip(activities, smoothed_activity_points_weekly_full)}
    # #activity_data = {activity: points for activity, points in zip(activities, activity_total_points)}
    # # Creating a DataFrame with dates as index
    # df = pd.DataFrame(activity_data, index=pd.to_datetime(dates))
    # # Check if the DataFrame shape matches your expectations
    # print("DataFrame shape:", df.shape)  # Should be (530, 52)
    # # Save the DataFrame to a CSV file
    # csv_filename = 'stats_animation.csv'
    # df.to_csv(csv_filename)
    # # If you want to verify a small part of your DataFrame
    # print(df.head())  # Prints the first 5 rows
    # print(df.tail())         
    # bar_chart_animation.create_animation_from_csv(csv_filename, "all_habits_monthly_average_count")